<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RMT Application</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #edf2f7; /* gray-200 */
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb {
            background: #a0aec0; /* gray-500 */
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #718096; /* gray-600 */
        }
        html, body {
            height: 100%;
            margin: 0;
            font-family: 'Inter', sans-serif;
            background-color: #f7fafc; /* gray-100 */
        }
        /* Active sidebar link */
        .sidebar-link-active {
            background-color: #e0f2fe; 
            color: #0ea5e9; 
            font-weight: 600;
            border-left: 3px solid #0ea5e9; 
            padding-left: calc(0.5rem - 3px); 
        }
        .sidebar-link:hover { 
            background-color: #f0f9ff; 
            color: #0369a1; 
        }
        /* Page sections */
        .page-section {
            display: none;
            animation: fadeIn 0.3s ease-in-out;
        }
        .page-section.active {
            display: block;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .btn {
            @apply px-4 py-2 rounded-md font-medium shadow-sm transition-colors duration-150 focus:outline-none focus:ring-2 focus:ring-offset-2;
        }
        .btn-primary {
            @apply bg-sky-600 text-white hover:bg-sky-700 focus:ring-sky-500;
        }
        .btn-secondary { /* Added for consistency if needed elsewhere */
            @apply bg-slate-600 text-white hover:bg-slate-700 focus:ring-slate-500;
        }
        .btn-success {
            @apply bg-emerald-600 text-white hover:bg-emerald-700 focus:ring-emerald-500;
        }
        .btn-warning { /* Added for consistency */
            @apply bg-amber-500 text-white hover:bg-amber-600 focus:ring-amber-400;
        }
        .btn-danger { /* Added for consistency */
            @apply bg-red-600 text-white hover:bg-red-700 focus:ring-red-500;
        }
        .btn-outline-primary { 
            @apply bg-transparent text-sky-600 border border-sky-600 hover:bg-sky-50;
        }
        .input-field { 
            @apply mt-1 block w-full p-2.5 border border-gray-300 rounded-md shadow-sm focus:ring-sky-500 focus:border-sky-500 sm:text-sm;
        }
        .label-text { /* For form field labels */
            @apply text-sm font-medium text-gray-700;
        }
        .card { /* General card style, also used for home screen items */
             @apply bg-white p-4 rounded-xl shadow-lg; /* Adjusted padding for home screen cards */
        }
        .form-section-card { 
             @apply bg-white p-6 md:p-8 rounded-xl shadow-xl;
        }

    </style>
</head>
<body class="bg-gray-100">

    <div id="app-container" class="min-h-screen flex flex-col">
        <nav class="bg-sky-700 text-white p-4 flex justify-between items-center shadow-lg sticky top-0 z-50">
            <div class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-3 text-sky-300"><rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect><path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path></svg>
                <h1 class="text-2xl font-semibold">Resource Management Tool (RMT)</h1>
            </div>
            <div class="text-sm text-sky-200">
                Notes Link: <a href="#" class="underline hover:text-sky-100">N:/GLCL/Notes/....</a>
            </div>
        </nav>

        <div class="flex flex-1 overflow-hidden">
            <aside id="sidebar" class="w-64 bg-white p-4 space-y-1 border-r border-gray-200 h-full overflow-y-auto shadow-sm">
            </aside>

            <main id="main-content" class="flex-1 overflow-y-auto p-6 md:p-8 bg-slate-50">
                <section id="home-screen" class="page-section active">
                    <h2 class="text-3xl font-semibold text-sky-700 mb-8">RMT Options</h2>
                    <div class="space-y-5 max-w-4xl mx-auto" id="home-screen-options-container">
                        </div>
                </section>

                <section id="addForm-screen" class="page-section">
                </section>

                <section id="transferForm-screen" class="page-section">
                </section>

                <section id="termForm-screen" class="page-section">
                </section>

                <section id="viewRequests-screen" class="page-section">
                </section>

                <section id="reports-screen" class="page-section">
                    <h2 class="text-3xl font-semibold text-sky-700 mb-8">Report Generation</h2>
                    <div class="bg-white p-8 rounded-xl shadow-lg text-center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="56" height="56" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mx-auto text-sky-500 mb-5"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><line x1="10" y1="9" x2="8" y2="9"></line></svg>
                        <p class="text-gray-700 text-lg">Report generation functionality will be available here.</p>
                        <p class="text-gray-500 mt-2">This section will allow users to configure and generate various reports based on RMT data.</p>
                        <button type="button" class="btn btn-primary mt-6">Generate Sample Report</button>
                    </div>
                </section>
            </main>
        </div>
    </div>

    <script>
        const ICONS = {
            Home: () => `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>`,
            ListFilter: () => `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18"/><path d="M7 12h10"/><path d="M10 18h4"/></svg>`,
            UserPlus: () => `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><line x1="19" x2="19" y1="8" y2="14"></line><line x1="22" x2="16" y1="11" y2="11"></line></svg>`,
            ArrowRightLeft: () => `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="17 1 21 5 17 9"></polyline><path d="M3 11V9a4 4 0 0 1 4-4h14"></path><polyline points="7 23 3 19 7 15"></polyline><path d="M21 13v2a4 4 0 0 1-4 4H3"></path></svg>`,
            UserMinus: () => `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><line x1="22" x2="16" y1="11" y2="11"></line></svg>`,
            LogOut: () => `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path><polyline points="16 17 21 12 16 7"></polyline><line x1="21" y1="12" x2="9" y2="12"></line></svg>`,
            CalendarDays: () => `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>`,
            Search: () => `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-gray-400"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>`,
            FilePlus: () => `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="12" y1="18" x2="12" y2="12"></line><line x1="9" y1="15" x2="15" y2="15"></line></svg>`,
            Edit3: () => `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2"><path d="M12 20h9"></path><path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path></svg>`,
            Maximize: () => `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2"><path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"></path></svg>`,
            Minimize: () => `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2"><path d="M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"></path></svg>`,
            ChevronDown: () => `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>`,
            ChevronRight: () => `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 18 15 12 9 6"></polyline></svg>`,
            FileText: () => `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><line x1="10" y1="9" x2="8" y2="9"></line></svg>`,
        };

        let currentPage = 'home';
        let selectedRequestType = 'All';
        let requests = [
            { id: 'R001', type: 'Add', company: 'Cognizant', status: 'PMO Review', userName: 'Jaya Shankar Alapati', startDate: '2025-04-15', location: 'Hyderabad', racfId: 'JA12345', details: { firstName: 'Jaya Shankar', lastName: 'Alapati', project: 'Project Alpha' } },
            { id: 'R002', type: 'Add', company: 'Cognizant', status: 'Approved', userName: 'Hemalatha Sivakumar', startDate: '2025-04-16', location: 'Chennai', racfId: 'HS67890', details: { firstName: 'Hemalatha', lastName: 'Sivakumar', project: 'Project Beta' } },
            { id: 'R003', type: 'Transfer', company: 'Infosys', status: 'Approved', userName: 'Sugapriya Manikandan', startDate: '2025-05-05', location: 'Bangalore', racfId: 'SM11223', details: { firstName: 'Sugapriya', lastName: 'Manikandan', newRole: 'Senior Developer' } },
            { id: 'R004', type: 'Terminate', company: 'Wipro', status: 'Pending HR', userName: 'Neelima Nimmagadda', startDate: '2025-04-28', location: 'Hyderabad', racfId: 'NN33445', details: { firstName: 'Neelima', lastName: 'Nimmagadda', reason: 'Contract End' } },
        ];
        let expandedRows = {};
        let sortBy = 'startDate';
        let sortOrder = 'desc';

        function navigateTo(pageId, type = 'All') {
            currentPage = pageId.replace('-screen', '');
            selectedRequestType = type;
            document.querySelectorAll('.page-section').forEach(section => section.classList.remove('active'));
            const targetPage = document.getElementById(pageId);
            if (targetPage) {
                targetPage.classList.add('active');
            } else {
                console.error("Target page not found:", pageId);
                const homeScreenEl = document.getElementById('home-screen');
                if (homeScreenEl) homeScreenEl.classList.add('active');
                currentPage = 'home';
            }
            renderSidebar();
            if (currentPage === 'viewRequests') renderViewRequestsScreen();
            if (currentPage === 'addForm') renderRequestForm('Add', addRequestFields, 'addForm-screen', fillAddFormSampleData);
            if (currentPage === 'transferForm') renderRequestForm('Transfer', transferRequestFields, 'transferForm-screen', fillTransferFormSampleData);
            if (currentPage === 'termForm') renderRequestForm('Terminate', terminateRequestFields, 'termForm-screen', fillTermFormSampleData);
        }

        function renderSidebar() {
            const sidebarEl = document.getElementById('sidebar');
            if (!sidebarEl) { console.error("Sidebar element (#sidebar) not found."); return; }
            const commonLinks = [{ name: 'Home', icon: ICONS.Home(), page: 'home-screen' }];
            const viewRequestLinks = [
                { name: 'All Requests', icon: ICONS.ListFilter(), page: 'viewRequests-screen', type: 'All' },
                { name: 'Add Requests', icon: ICONS.UserPlus(), page: 'viewRequests-screen', type: 'Add' },
                { name: 'Transfer Requests', icon: ICONS.ArrowRightLeft(), page: 'viewRequests-screen', type: 'Transfer' },
                { name: 'Terminate Requests', icon: ICONS.UserMinus(), page: 'viewRequests-screen', type: 'Terminate' },
            ];
            let links = currentPage === 'viewRequests' ? [...commonLinks, ...viewRequestLinks] : commonLinks;
            if (currentPage === 'home') {
                 links.push({ name: 'View By Status', icon: ICONS.ListFilter(), page: 'viewRequests-screen', type: 'All'});
            }
            links.push({ name: 'Reports', icon: ICONS.FilePlus(), page: 'reports-screen'});
            sidebarEl.innerHTML = `
                ${links.map(link => `
                    <button onclick="navigateTo('${link.page}', '${link.type || 'All'}')"
                        class="w-full flex items-center space-x-3 p-2.5 rounded-md text-left text-gray-600 sidebar-link ${
                            (currentPage === link.page.replace('-screen','') && (currentPage !== 'viewRequests' || selectedRequestType === (link.type || 'All'))) ? 'sidebar-link-active' : ''
                        }">
                        ${link.icon} <span class="text-sm font-medium">${link.name}</span>
                    </button>`).join('')}
                <div class="pt-4 mt-4 border-t border-gray-200">
                    <button onclick="showCustomAlert('Exit Clicked', 'This would typically close the application or log out the user.', 'info')"
                        class="w-full flex items-center space-x-3 p-2.5 rounded-md text-left text-gray-600 sidebar-link hover:bg-red-50 hover:text-red-600">
                        ${ICONS.LogOut()} <span class="text-sm font-medium">Exit</span>
                    </button>
                </div>`;
        }

        function getCategoryIcon(itemType, itemLabel = '') {
            if (itemType === 'Add') return ICONS.UserPlus();
            if (itemType === 'Transfer') return ICONS.ArrowRightLeft();
            if (itemType === 'Terminate') return ICONS.UserMinus();
            if (itemLabel.includes('All Requests') || itemType === 'All') return ICONS.ListFilter();
            if (itemLabel.includes('Report')) return ICONS.FilePlus();
            return ICONS.ListFilter(); // Default icon
        }

        function renderHomeScreen() {
            const homeScreenOptionsEl = document.getElementById('home-screen-options-container');
            if (!homeScreenOptionsEl) {
                console.error("Home screen options container (#home-screen-options-container) not found.");
                return;
            }

            homeScreenOptionsEl.innerHTML = `
                <div class="card mb-8">
                    <h3 class="text-xl font-semibold text-sky-700 mb-4 flex items-center">
                        ${ICONS.FilePlus()} <span class="ml-2">Create New Requests</span>
                    </h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <button onclick="navigateTo('addForm-screen')" class="btn btn-success text-base flex items-center justify-center py-3">
                            ${ICONS.UserPlus()} <span class="ml-2">Add Request</span>
                        </button>
                        <button onclick="navigateTo('transferForm-screen')" class="btn btn-success text-base flex items-center justify-center py-3">
                            ${ICONS.ArrowRightLeft()} <span class="ml-2">Transfer Request</span>
                        </button>
                        <button onclick="navigateTo('termForm-screen')" class="btn btn-success text-base flex items-center justify-center py-3">
                            ${ICONS.UserMinus()} <span class="ml-2">Terminate Request</span>
                        </button>
                    </div>
                </div>

                <div class="card">
                    <h3 class="text-xl font-semibold text-sky-700 mb-4 flex items-center">
                        ${ICONS.ListFilter()} <span class="ml-2">View Existing Requests & Reports</span>
                    </h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <button onclick="navigateTo('viewRequests-screen', 'All')" class="btn btn-primary text-base flex items-center justify-center py-3">
                            ${ICONS.ListFilter()} <span class="ml-2">View All Requests</span>
                        </button>
                        <button onclick="navigateTo('viewRequests-screen', 'Add')" class="btn btn-primary text-base flex items-center justify-center py-3">
                            ${ICONS.UserPlus()} <span class="ml-2">View Add Requests</span>
                        </button>
                        <button onclick="navigateTo('viewRequests-screen', 'Transfer')" class="btn btn-primary text-base flex items-center justify-center py-3">
                            ${ICONS.ArrowRightLeft()} <span class="ml-2">View Transfer Requests</span>
                        </button>
                        <button onclick="navigateTo('viewRequests-screen', 'Terminate')" class="btn btn-primary text-base flex items-center justify-center py-3">
                            ${ICONS.UserMinus()} <span class="ml-2">View Terminate Requests</span>
                        </button>
                        <button onclick="navigateTo('reports-screen')" class="btn btn-primary text-base flex items-center justify-center py-3">
                            ${ICONS.FileText()} <span class="ml-2">Reports</span>
                        </button>
                    </div>
                </div>
            `;
        }

        function createFormFieldHTML(field) {
            const { label, id, type = 'text', required, options, value, placeholder, info } = field;
            let inputHtml = '';
            const currentValue = value || field.defaultValue || (field.type === 'checkboxGroup' ? {} : '');
            const baseInputClasses = "input-field"; 
            const radioCheckboxBaseClasses = "focus:ring-sky-500 h-4 w-4 text-sky-600 border-gray-300 rounded";

            if (type === 'select') {
                inputHtml = `<select id="${id}" name="${id}" class="${baseInputClasses}">
                    ${placeholder ? `<option value="" disabled ${currentValue === '' ? 'selected' : ''}>${placeholder}</option>` : ''}
                    ${options.map(opt => `<option value="${opt.value || opt}" ${currentValue === (opt.value || opt) ? 'selected' : ''}>${opt.label || opt}</option>`).join('')}
                </select>`;
            } else if (type === 'radio') {
                inputHtml = `<div class="flex items-center space-x-6 mt-1 py-1">
                    ${options.map(opt => `
                        <label class="flex items-center space-x-2 cursor-pointer">
                            <input type="radio" id="${id}_${opt.value}" name="${id}" value="${opt.value}" ${currentValue === opt.value ? 'checked' : ''} class="${radioCheckboxBaseClasses}">
                            <span class="label-text">${opt.label}</span></label>`).join('')}</div>`;
            } else if (type === 'checkboxGroup') {
                inputHtml = `<div class="flex flex-wrap gap-x-6 gap-y-2 mt-1 py-1">
                    ${options.map(opt => `
                        <label class="flex items-center space-x-2 cursor-pointer">
                            <input type="checkbox" id="${id}_${opt.value}" name="${opt.name || id}" value="${opt.value}" ${currentValue[opt.value] ? 'checked' : ''} class="${radioCheckboxBaseClasses}">
                            <span class="label-text">${opt.label}</span></label>`).join('')}</div>`;
            } else if (type === 'textarea') {
                inputHtml = `<textarea id="${id}" name="${id}" rows="3" class="${baseInputClasses}" placeholder="${placeholder || ''}">${currentValue}</textarea>`;
            } else { 
                inputHtml = `<div class="relative flex items-center">
                    <input type="${type}" id="${id}" name="${id}" value="${currentValue}" class="${baseInputClasses} ${type === 'date' ? 'pr-10' : ''}" placeholder="${placeholder || ''}">
                    ${type === 'date' ? ICONS.CalendarDays() : ''}</div>`;
            }
            return `
                <div class="grid grid-cols-1 md:grid-cols-12 gap-2 items-start py-3 border-b border-gray-200 last:border-b-0">
                    <label for="${id}" class="label-text md:col-span-4">
                        ${label}${required ? '<span class="text-red-500 ml-1">*</span>' : ''}
                        ${info ? `<span class="block text-xs text-gray-500 font-normal mt-0.5">${info}</span>` : ''}
                    </label>
                    <div class="md:col-span-8">${inputHtml}</div></div>`;
        }
        
        function renderRequestForm(requestType, fields, screenId, sampleDataFiller) { 
            const formScreenEl = document.getElementById(screenId);
            if (!formScreenEl) { console.error("Form screen element not found:", screenId); return; }
            formScreenEl.innerHTML = `
                <div class="form-section-card max-w-5xl mx-auto">
                    <div class="flex justify-between items-center mb-2">
                        <h2 class="text-2xl font-semibold text-sky-700">RMT Contractor Input Form</h2>
                        <span class="px-3 py-1 text-sm font-medium bg-sky-100 text-sky-700 rounded-full">${requestType.toUpperCase()} REQUEST</span></div>
                    <p class="text-gray-600 mb-4">Please fill in all required fields accurately.</p>
                    <div class="mb-6">
                        <button type="button" onclick="${sampleDataFiller.name}('${requestType.toLowerCase()}RequestForm')" class="btn btn-outline-primary w-full sm:w-auto flex items-center justify-center">
                            ${ICONS.FileText()} <span class="ml-2">Fill Sample Data</span>
                        </button>
                    </div>
                    <form id="${requestType.toLowerCase()}RequestForm" class="space-y-1">
                        ${fields.map(field => createFormFieldHTML(field)).join('')}
                        <div class="pt-8 flex justify-end">
                            <button type="submit" class="btn btn-primary">Submit Request</button>
                        </div>
                    </form>
                </div>`;
            const formEl = document.getElementById(`${requestType.toLowerCase()}RequestForm`);
            if (formEl) { formEl.addEventListener('submit', (e) => handleFormSubmit(e, requestType, fields));} 
            else { console.error(`Form element #${requestType.toLowerCase()}RequestForm not found after rendering.`);}
        }
        
        function handleFormSubmit(event, requestType, fieldsConfig) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = {};
            let isValid = true;
            let firstErrorField = null;
            fieldsConfig.forEach(field => {
                if (field.type === 'checkboxGroup') {
                    data[field.id] = {}; 
                    field.options.forEach(opt => {
                        const checkboxValue = opt.value;
                        const allCheckedForThisGroup = formData.getAll(opt.name || field.id);
                        data[field.id][checkboxValue] = allCheckedForThisGroup.includes(checkboxValue);});
                } else if (field.type === 'radio') { data[field.id] = formData.get(field.id); } 
                else { data[field.id] = formData.get(field.id); }
                if (field.required) {
                    let fieldIsEmpty = false;
                    if (field.type === 'checkboxGroup') {
                        const isAnyChecked = Object.values(data[field.id]).some(checked => checked);
                        if (!isAnyChecked) fieldIsEmpty = true;
                    } else if (!data[field.id] || (typeof data[field.id] === 'string' && data[field.id].trim() === '')) { fieldIsEmpty = true;}
                    if (fieldIsEmpty) {
                        if(isValid) firstErrorField = field.id; 
                        isValid = false;
                        const labelElement = document.querySelector(`label[for='${field.id}']`);
                        if (labelElement) { labelElement.classList.add('text-red-600','font-bold'); }} 
                    else {
                        const labelElement = document.querySelector(`label[for='${field.id}']`);
                        if (labelElement) { labelElement.classList.remove('text-red-600','font-bold');}}
                }
            });
            if (!isValid) {
                showCustomAlert('Validation Error', 'Please fill in all required fields (highlighted in red).', 'error');
                if(firstErrorField) { const elToFocus = document.getElementById(firstErrorField); if(elToFocus) elToFocus.focus();}
                return;
            }
            const newRequest = {
                id: `R${String(requests.length + 1001).slice(1)}`, type: requestType,
                userName: `${data.firstName || data.name} ${data.lastName || ''}`.trim(),
                company: data.company, startDate: data.startDate || data.transferDate || data.effectiveDate,
                location: data.workspaceLocation || data.currentLocation || data.currentLocationSite, 
                racfId: data.racfId, status: 'PMO Review', details: { ...data }};
            requests.unshift(newRequest);
            showCustomAlert('Success!', `Request ${newRequest.id} submitted successfully.`, 'success');
            navigateTo('viewRequests-screen', requestType);
        }

        function renderViewRequestsScreen() {
            const viewRequestsEl = document.getElementById('viewRequests-screen');
            if (!viewRequestsEl) { console.error("View Requests element (#viewRequests-screen) not found."); return; }
            const searchTerm = document.getElementById('viewRequestsSearchInput')?.value.toLowerCase() || '';
            const filteredRequests = requests
                .filter(req => selectedRequestType === 'All' || req.type === selectedRequestType)
                .filter(req => {
                    if (!searchTerm) return true;
                    return Object.values(req).some(val => String(val).toLowerCase().includes(searchTerm)) ||
                           (req.details && Object.values(req.details).some(val => String(val).toLowerCase().includes(searchTerm)));})
                .sort((a, b) => {
                    const valA = a[sortBy]; const valB = b[sortBy];
                    let comparison = 0;
                    if (valA > valB) comparison = 1; else if (valA < valB) comparison = -1;
                    return sortOrder === 'asc' ? comparison : comparison * -1;});
            const getSortIndicator = (columnKey) => (sortBy === columnKey) ? (sortOrder === 'asc' ? '▲' : '▼') : '';
            const tableHeaders = [
                { key: 'company', label: 'Company' }, { key: 'status', label: 'Status' },
                { key: 'userName', label: 'User Name' }, { key: 'startDate', label: 'Start Date' },
                { key: 'location', label: 'Location' }, { key: 'racfId', label: 'RACF ID' }, { key: 'type', label: 'Type' }];
            viewRequestsEl.innerHTML = `
                <div class="mb-6 bg-white p-6 rounded-xl shadow-lg">
                    <div class="flex flex-wrap justify-between items-center gap-4 mb-6">
                        <h2 class="text-2xl font-semibold text-sky-700">View Requests (${selectedRequestType})</h2>
                        <div class="flex space-x-2">
                            <button onclick="navigateTo('addForm-screen')" class="btn btn-success text-sm">${ICONS.FilePlus()} Add Resource</button>
                            <button onclick="showCustomAlert('Edit Document', 'This feature is not yet implemented.', 'info')" class="btn btn-warning text-sm">${ICONS.Edit3()} Edit Document</button></div></div>
                     <div class="grid grid-cols-1 md:grid-cols-2 gap-4 items-end">
                        <div class="relative"><div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">${ICONS.Search()}</div>
                            <input type="text" id="viewRequestsSearchInput" placeholder="Search requests..." class="input-field pl-10 w-full" oninput="renderViewRequestsScreen()" value="${searchTerm}"/></div>
                        <div class="grid grid-cols-1 sm:grid-cols-3 gap-2">
                            <select id="viewRequestsSortSelect" class="input-field col-span-2" onchange="handleSortChange(this.value)">
                                <option value="startDate-desc" ${sortBy==='startDate'&&sortOrder==='desc'?'selected':''}>Sort: Start Date (Newest)</option>
                                <option value="startDate-asc" ${sortBy==='startDate'&&sortOrder==='asc'?'selected':''}>Sort: Start Date (Oldest)</option>
                                <option value="userName-asc" ${sortBy==='userName'&&sortOrder==='asc'?'selected':''}>Sort: User Name (A-Z)</option>
                                <option value="userName-desc" ${sortBy==='userName'&&sortOrder==='desc'?'selected':''}>Sort: User Name (Z-A)</option>
                                <option value="status-asc" ${sortBy==='status'&&sortOrder==='asc'?'selected':''}>Sort: Status (A-Z)</option>
                                <option value="status-desc" ${sortBy==='status'&&sortOrder==='desc'?'selected':''}>Sort: Status (Z-A)</option>
                                <option value="company-asc" ${sortBy==='company'&&sortOrder==='asc'?'selected':''}>Sort: Company (A-Z)</option>
                                <option value="company-desc" ${sortBy==='company'&&sortOrder==='desc'?'selected':''}>Sort: Company (Z-A)</option></select>
                            <div class="flex space-x-1">
                                <button onclick="expandAllRows(true)" title="Expand All" class="btn btn-secondary text-sm w-1/2 sm:w-auto flex-grow justify-center">${ICONS.Maximize()}</button>
                                <button onclick="expandAllRows(false)" title="Collapse All" class="btn btn-secondary text-sm w-1/2 sm:w-auto flex-grow justify-center">${ICONS.Minimize()}</button></div></div></div></div>
                <div class="overflow-x-auto bg-white rounded-xl shadow-lg">
                    <table class="min-w-full divide-y divide-gray-200"><thead class="bg-slate-100"><tr>
                        <th class="px-4 py-3.5 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider w-12"></th>
                        ${tableHeaders.map(h => `<th onclick="handleSortClick('${h.key}')" class="px-4 py-3.5 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider cursor-pointer hover:bg-slate-200 transition-colors">${h.label} <span class="text-sky-600" id="sort-indicator-${h.key}">${getSortIndicator(h.key)}</span></th>`).join('')}
                        </tr></thead><tbody class="bg-white divide-y divide-gray-200" id="requestsTableBody">
                        ${filteredRequests.map((req, idx) => `
                            <tr class="${idx%2===0?'bg-white':'bg-slate-50'} hover:bg-sky-50 transition-colors">
                                <td class="px-4 py-3 whitespace-nowrap"><button onclick="toggleRow('${req.id}')" class="text-sky-600 hover:text-sky-800 p-1 rounded-full hover:bg-sky-100">${expandedRows[req.id]?ICONS.ChevronDown():ICONS.ChevronRight()}</button></td>
                                ${tableHeaders.map(h => `<td class="px-4 py-3 whitespace-nowrap text-sm text-gray-700">${h.key==='status'?`<span class="px-2.5 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full ${req.status==='Approved'?'bg-green-100 text-green-800':req.status==='PMO Review'?'bg-yellow-100 text-yellow-800':req.status==='Pending HR'?'bg-red-100 text-red-800':'bg-gray-100 text-gray-800'}">${req.status||'N/A'}</span>`:(req[h.key]||'N/A')}</td>`).join('')}</tr>
                            ${expandedRows[req.id]?`<tr id="details-${req.id}" class="details-row ${idx%2===0?'bg-white':'bg-slate-50'}"><td colspan="${tableHeaders.length+1}" class="p-0"><div class="p-5 bg-sky-50 border-l-4 border-sky-500">
                                <h4 class="text-lg font-semibold text-sky-700 mb-3">Request Details (${req.id})</h4>
                                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-3 text-sm">
                                    ${Object.entries(req.details||{}).map(([k,v])=>{const dk=k.replace(/([A-Z])/g,' $1').replace(/^./,s=>s.toUpperCase());let dv=String(v);if(typeof v==='object'&&v!==null){dv=Object.entries(v).filter(([sk,sv])=>sv===true).map(([sk,sv])=>sk.replace(/([A-Z])/g,' $1').replace(/^./,s=>s.toUpperCase())).join(', ');if(!dv)dv='N/A';}else if(v===true){dv='Yes';}else if(v===false){dv='No';}return `<div><strong class="text-gray-600">${dk}:</strong> <span class="text-gray-800">${dv||'N/A'}</span></div>`;}).join('')}</div>
                                ${(!req.details||Object.keys(req.details).length===0)?'<p class="text-gray-500 mt-2">No additional details available.</p>':''}
                                <div class="mt-4 pt-3 border-t border-sky-200 flex space-x-3"><button class="btn btn-danger btn-sm">Reject</button><button class="btn btn-success btn-sm">Approve</button></div></div></td></tr>`:''}
                        `).join('')}
                        ${filteredRequests.length===0?`<tr><td colspan="${tableHeaders.length+1}" class="text-center py-12 text-gray-500"><div class="flex flex-col items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="text-gray-400 mb-3"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
                            <p class="text-lg">No requests found matching your criteria.</p><p class="text-sm text-gray-400">Try adjusting your search or filter.</p></div></td></tr>`:''}
                        </tbody></table></div>`;
        }
        
        window.toggleRow = (id) => { expandedRows[id] = !expandedRows[id]; renderViewRequestsScreen(); };
        window.expandAllRows = (expand) => {
            const currentSearchTerm = document.getElementById('viewRequestsSearchInput')?.value.toLowerCase() || '';
            const visibleRequestIds = requests.filter(req => selectedRequestType === 'All' || req.type === selectedRequestType)
                .filter(req => { if (!currentSearchTerm) return true; return Object.values(req).some(val => String(val).toLowerCase().includes(currentSearchTerm)) || (req.details && Object.values(req.details).some(val => String(val).toLowerCase().includes(currentSearchTerm)));}).map(req => req.id);
            visibleRequestIds.forEach(id => { expandedRows[id] = expand; }); renderViewRequestsScreen(); };
        window.handleSortChange = (value) => { const [newSortBy, newSortOrder] = value.split('-'); sortBy = newSortBy; sortOrder = newSortOrder; renderViewRequestsScreen(); };
        window.handleSortClick = (columnKey) => {
            if (sortBy === columnKey) { sortOrder = sortOrder === 'asc' ? 'desc' : 'asc'; } else { sortBy = columnKey; sortOrder = 'asc';}
            const sortSelect = document.getElementById('viewRequestsSortSelect'); if(sortSelect) sortSelect.value = `${sortBy}-${sortOrder}`; renderViewRequestsScreen(); };

        const commonResourceFields = [
            { label: 'Company (Vendor)', id: 'company', type: 'select', required: true, options: ['Cognizant', 'Infosys', 'Wipro', 'Capgemini', 'TCS', 'Other'], defaultValue: 'Cognizant', placeholder: 'Select Vendor' },
            { label: 'First Name', id: 'firstName', required: true, placeholder: 'Enter first name' }, { label: 'Last Name', id: 'lastName', required: true, placeholder: 'Enter last name' },
            { label: 'RACF ID', id: 'racfId', placeholder: 'e.g., AB12345 (if available)' },];
        const addRequestFields = [ { label: 'Start Date', id: 'startDate', type: 'date', required: true }, ...commonResourceFields.slice(0,1), 
            { label: 'Cognizant Employee ID', id: 'cognizantEmployeeId', placeholder: 'Only if company is Cognizant' }, ...commonResourceFields.slice(1), 
            { label: 'Middle Initial', id: 'middleInitial', placeholder: 'M.I.' }, { label: 'Contractor Contact Phone Number', id: 'contractorPhone', type: 'tel', required: true, placeholder: 'e.g., (555) 123-4567' },
            { label: 'Contractor Contact Phone Extension', id: 'contractorPhoneExt', placeholder: 'Ext.' }, { label: 'Reporting Manager (KeyBank)', id: 'reportingManager', required: true, placeholder: 'Full Name' },
            { label: 'Reporting Manager\'s Manager (KeyBank)', id: 'reportingManagersManager', required: true, placeholder: 'Full Name' }, { label: 'Secondary Contact Name (KeyBank)', id: 'secondaryContactName', required: true, placeholder: 'Full Name' },
            { label: 'Model after name (for NT_A)', id: 'modelAfterName', required: true, placeholder: 'Full Name of existing user' },
            { label: 'Workspace Location', id: 'workspaceLocation', type: 'radio', required: true, options: [ {value: 'onsite', label: 'Onsite'}, {value: 'mobile', label: 'Mobile'}, {value: 'offsite', label: 'Offsite'} ], defaultValue: 'onsite' },
            { label: 'Softphone required?', id: 'softphoneRequired', type: 'radio', required: true, options: [ {value: 'yes', label: 'Yes'}, {value: 'no', label: 'No'} ], defaultValue: 'no' },
            { label: 'PC Model Requested', id: 'pcModel', type: 'radio', required: true, options: [ {value: 'none', label: 'None'}, {value: 'desktop', label: 'Desktop'}, {value: 'laptop', label: 'Laptop'}, {value: 'highPerfLaptop', label: 'High Performance Laptop'}, {value: 'appleMacbook', label: 'Apple MacBook'}, {value: 'tablet', label: 'Tablet'} ], defaultValue: 'none' },
            { label: 'Is this related to a project?', id: 'relatedToProject', type: 'radio', required: true, options: [ {value: 'yes', label: 'Yes'}, {value: 'no', label: 'No'} ], defaultValue: 'no' },
            { label: 'Project Name', id: 'projectName', placeholder: 'If yes, enter project name' }, { label: 'Project Manager', id: 'projectManager', placeholder: 'Project Manager Name' }, { label: 'EPPIC Project Number', id: 'eppicProjectNumber', placeholder: 'EPPIC No.' },
            { label: 'Project Type', id: 'projectType', type: 'select', options: ['Development', 'Maintenance', 'Consulting', 'Enhancement', 'Other'], required: true, placeholder: 'Select Project Type' },
            { label: 'Contract Workspace #', id: 'contractWorkspaceNo', required: true, placeholder: 'CW Number' }, { label: 'SOW Name', id: 'sowName', placeholder: 'Statement of Work Name' }, { label: 'Cost Center', id: 'costCenter', required: true, placeholder: 'e.g., CC12345' },
            { label: 'Fixed Bid or T&M', id: 'bidType', type: 'select', options: ['Fixed Bid', 'T&M'], required: true, defaultValue: 'Fixed Bid' },
            { label: 'Role', id: 'role', type: 'select', options: ['Developer', 'QA Analyst', 'Project Manager', 'Business Analyst', 'Architect', 'Consultant'], required: true, placeholder: 'Select Role' },
            { label: 'Skill', id: 'skill', type: 'select', options: ['Java', 'React', 'Angular', 'SQL', '.NET', 'Python', 'Project Management', 'Business Analysis'], required: true, placeholder: 'Select Primary Skill' },
            { label: 'Rate / HR', id: 'rateHr', type: 'number', required: true, placeholder: 'e.g., 75.00' }, { label: 'Resource Type', id: 'resourceType', type: 'select', options: ['Active', 'Inactive'], required: true, defaultValue: 'Active' },
            { label: 'EPPIC Timesheet Approver', id: 'eppicTimesheetApprover', placeholder: 'Full Name' }, { label: 'Additional Comments', id: 'additionalCommentsAdd', type: 'textarea', placeholder: 'Any other relevant information...' },];
        const transferRequestFields = [ { label: 'Name (As in system)', id: 'name', required: true, placeholder: 'Current Full Name of Resource' }, ...commonResourceFields, 
            { label: 'Key Employee ID', id: 'keyEmployeeId', required: true, placeholder: 'KeyBank Employee ID (if applicable)' }, { label: 'Current Location (Actual)', id: 'currentLocation', required: true, placeholder: 'e.g., Cleveland, OH / Remote' }, 
            { label: 'Current Reporting Manager', id: 'currentReportingManager', required: true, placeholder: 'Full Name' }, { label: 'Current Reporting Manager\'s Manager', id: 'currentReportingManagersManager', required: true, placeholder: 'Full Name' }, 
            { label: 'Current Job Title', id: 'currentJobTitle', required: true, placeholder: 'Current Role / Title' }, { label: 'Current Cost Center', id: 'currentCostCenter', required: true, placeholder: 'Current CC' }, 
            { label: 'Current Cube#', id: 'currentCubeNo', placeholder: 'If applicable' }, { label: 'Current Phone#', id: 'currentPhoneNo', type: 'tel', placeholder: 'e.g., (555) 123-4567' }, { label: 'Transfer Date', id: 'transferDate', type: 'date', required: true },
            { label: 'Item(s) to Update for Transfer', id: 'itemsToUpdate', type: 'checkboxGroup', required: true, options: [ {value: 'manager', label: 'Manager'}, {value: 'costCenter', label: 'Cost Center'}, {value: 'location', label: 'Location'}, {value: 'engagementInfo', label: 'Engagement Information'}, {value: 'roleSkillRate', label: 'Role/Skill/Rate'} ], info: "Select all that apply" },
            { label: 'New Reporting Manager', id: 'newReportingManager', placeholder: 'If Manager is changing' }, { label: 'New Cost Center', id: 'newCostCenter', placeholder: 'If Cost Center is changing' }, 
            { label: 'New Location', id: 'newLocation', placeholder: 'If Location is changing' }, { label: 'New Project Type', id: 'newProjectType', type: 'select', options: ['Development', 'Maintenance', 'Consulting', 'Enhancement', 'Other'], placeholder: 'Select New Project Type' },
            { label: 'New Contract Workspace #', id: 'newContractWorkspaceNo', placeholder: 'New CW Number' }, { label: 'New SOW Name', id: 'newSowName', placeholder: 'New SOW Name' },
            { label: 'New Fixed Bid or T&M', id: 'newBidType', type: 'select', options: ['Fixed Bid', 'T&M'], defaultValue: 'Fixed Bid' }, { label: 'New Role', id: 'newRole', type: 'select', options: ['Developer', 'QA Analyst', 'Project Manager', 'Business Analyst', 'Architect', 'Consultant'], placeholder: 'Select New Role' },
            { label: 'New Skill', id: 'newSkill', type: 'select', options: ['Java', 'React', 'Angular', 'SQL', '.NET', 'Python', 'Project Management', 'Business Analysis'], placeholder: 'Select New Skill' }, { label: 'New Rate / HR', id: 'newRateHr', type: 'number', placeholder: 'e.g., 80.00' },
            { label: 'EPPIC change needed?', id: 'eppicChangeNeeded', type: 'checkboxGroup', required: true, options: [ {value: 'addToEPPIC', label: 'Add to EPPIC', name: 'eppicChangeNeeded_addToEPPIC'}, {value: 'rateChange', label: 'Rate Change', name: 'eppicChangeNeeded_rateChange'}, {value: 'costCenterChange', label: 'Cost Center Change', name: 'eppicChangeNeeded_costCenterChange'}, {value: 'timeCardApproverChange', label: 'Time Card Approver Change', name: 'eppicChangeNeeded_timeCardApproverChange'}, {value: 'noChange', label: 'No EPPIC change needed', name: 'eppicChangeNeeded_noChange'} ], info: "Provide explanation in comments if 'No Change'" },
            { label: 'EPPIC Timesheet Approver', id: 'eppicTimesheetApproverTransfer', placeholder: 'Full Name' }, { label: 'Additional Comments', id: 'additionalCommentsTransfer', type: 'textarea', placeholder: 'Reason for transfer, EPPIC explanation, etc.' },];
        const terminateRequestFields = [ { label: 'Name (As in system)', id: 'name', required: true, placeholder: 'Current Full Name of Resource' }, ...commonResourceFields, 
            { label: 'Key Employee ID', id: 'keyEmployeeId', required: true, placeholder: 'KeyBank Employee ID (if applicable)' }, { label: 'Project Type', id: 'projectTypeTerminate', type: 'select', options: ['Development SOW', 'Maintenance SOW', 'Consulting', 'Enhancement', 'Other'], defaultValue: 'Development SOW', placeholder: 'Select Project Type' },
            { label: 'Current Reporting Manager', id: 'currentReportingManagerTerm', required: true, placeholder: 'Full Name' }, { label: 'Current Reporting Manager\'s Manager', id: 'currentReportingManagersManagerTerm', required: true, placeholder: 'Full Name' },
            { label: 'Effective Date of Termination', id: 'effectiveDate', type: 'date', required: true }, { label: 'Reason/Description', id: 'reasonDescription', type: 'select', required: true, options: ['Contract End', 'Resignation', 'Performance Issue', 'Project Completion', 'Budget Cuts', 'Other'], placeholder: 'Select Reason' },
            { label: 'Is EPPIC separation needed?', id: 'eppicSeparationNeeded', type: 'radio', required: true, options: [ {value: 'yes', label: 'Yes'}, {value: 'no', label: 'No'} ], defaultValue: 'no' },
            { label: 'Current Location - Site', id: 'currentLocationSite', type: 'select', required: true, options: ['Key Tower - Cleveland', 'Higgings Road - Chicago', 'Tech Hub - Austin', 'Remote', 'Other'], placeholder: 'Select Site' },
            { label: 'Will contractor workspace be released or reserved?', id: 'workspaceStatus', type: 'radio', options: [ {value: 'none', label: 'None'}, {value: 'release', label: 'Release'}, {value: 'reserve', label: 'Reserve'} ], defaultValue: 'none' },
            { label: 'Current workspace number (if applicable)', id: 'currentWorkspaceNumber', placeholder: 'e.g., KT-12-105A' }, { label: 'Existing Phone Number', id: 'existingPhoneNumber', type: 'tel', placeholder: 'e.g., (555) 123-4567' },
            { label: 'Will phone be reassigned within 90 days?', id: 'phoneReassigned', type: 'radio', options: [ {value: 'yes', label: 'Yes'}, {value: 'no', label: 'No'} ], defaultValue: 'no' },
            { label: 'Person collecting equipment (laptop, badge, etc.)', id: 'equipmentCollector', placeholder: 'Full Name of KeyBank Employee' }, { label: 'Equipment Location:', id: 'equipmentLocation', placeholder: 'Where equipment will be stored/returned' },
            { label: 'Does contractor use a mobile device to access Key\'s network?', id: 'mobileDeviceAccess', type: 'radio', options: [ {value: 'yes', label: 'Yes'}, {value: 'no', label: 'No'} ], defaultValue: 'no' },
            { label: 'Enable email \'Out of Office\' message?', id: 'outOfOffice', type: 'radio', options: [ {value: 'yes', label: 'Yes'}, {value: 'no', label: 'No'} ], defaultValue: 'no', info: "If yes, provide message in comments." },
            { label: 'Additional Comments', id: 'additionalCommentsTerminate', type: 'textarea', placeholder: 'Details for \'Other\' reason, OOO message, etc.' },];

        function fillSampleData(formId, sampleData) {
            const form = document.getElementById(formId);
            if (!form) { console.error(`Form with ID ${formId} not found in fillSampleData.`); return; }
            for (const [key, value] of Object.entries(sampleData)) {
                const fieldElements = form.elements[key]; 
                if (fieldElements) {
                    if (fieldElements.constructor.name === "RadioNodeList") { 
                        let foundRadio = false;
                        Array.from(fieldElements).forEach(rb => { if (rb.value === String(value)) { rb.checked = true; foundRadio = true; } else { rb.checked = false; }});
                        if (!foundRadio) console.warn(`Radio value "${value}" for group "${key}" not found.`);
                    } else if (fieldElements.type === 'checkbox') { 
                        if (typeof value === 'object' && value !== null && value.hasOwnProperty(fieldElements.value)) { fieldElements.checked = Boolean(value[fieldElements.value]);} 
                        else { fieldElements.checked = Boolean(value);}
                    } else if (fieldElements.tagName === 'SELECT') { fieldElements.value = value; } 
                    else { fieldElements.value = value; }
                } else {
                    const fieldDef = addRequestFields.find(f=>f.id===key&&f.type==='checkboxGroup')||transferRequestFields.find(f=>f.id===key&&f.type==='checkboxGroup')||terminateRequestFields.find(f=>f.id===key&&f.type==='checkboxGroup');
                    if (fieldDef && typeof value === 'object') {
                        fieldDef.options.forEach(opt => {
                            const checkboxName = opt.name || fieldDef.id;
                            const checkboxesInGroup = form.elements[checkboxName];
                            if (checkboxesInGroup) {
                                if (checkboxesInGroup.length) { const targetCb = Array.from(checkboxesInGroup).find(cb => cb.value === opt.value); if (targetCb) targetCb.checked = Boolean(value[opt.value]);} 
                                else if (checkboxesInGroup.value === opt.value) { checkboxesInGroup.checked = Boolean(value[opt.value]);}}});
                    }
                }
            }
        }
        function fillAddFormSampleData(formId) { /* ... same as previous ... */ 
            const today = new Date(); const futureDate = new Date(new Date().setDate(today.getDate() + 14)).toISOString().split('T')[0];
            const sample = { startDate: futureDate, company: 'Cognizant', cognizantEmployeeId: 'EMP789012', firstName: 'Rajesh', middleInitial: 'K', lastName: 'Kumar', racfId: 'RK12345', contractorPhone: '(555) 987-6543', contractorPhoneExt: '101', reportingManager: 'Priya Sharma', reportingManagersManager: 'Amit Singh', secondaryContactName: 'Vijay Mehta', modelAfterName: 'Anjali Rao', workspaceLocation: 'onsite', softphoneRequired: 'yes', pcModel: 'laptop', relatedToProject: 'yes', projectName: 'Phoenix Initiative', projectManager: 'Deepak Ahuja', eppicProjectNumber: 'EPP789', projectType: 'Development', contractWorkspaceNo: 'CW-2025-005', sowName: 'Phoenix SOW Phase 1', costCenter: 'CCDEV01', bidType: 'T&M', role: 'Developer', skill: 'React', rateHr: '85.50', resourceType: 'Active', eppicTimesheetApprover: 'Priya Sharma', additionalCommentsAdd: 'Experienced React developer for frontend tasks.'};
            fillSampleData(formId, sample); showCustomAlert('Sample Data Filled', 'Add Request form has been populated with sample data.', 'info');
        }
        function fillTransferFormSampleData(formId) { /* ... same as previous ... */
            const today = new Date(); const transferDateValue = new Date(new Date().setDate(today.getDate() + 7)).toISOString().split('T')[0];
            const sample = { name: 'Hemalatha Sivakumar', company: 'Cognizant', firstName: 'Hemalatha', lastName: 'Sivakumar', racfId: 'HS67890', keyEmployeeId: 'KEY002', currentLocation: 'Chennai', currentReportingManager: 'Anitha Raj', currentReportingManagersManager: 'Sunil Varma', currentJobTitle: 'Software Engineer', currentCostCenter: 'CC456', currentCubeNo: 'CHN-05-E21', currentPhoneNo: '(555) 222-3333', transferDate: transferDateValue, itemsToUpdate: { manager: true, costCenter: true, roleSkillRate: true, location: false, engagementInfo: false }, newReportingManager: 'Vikram Rathod', newCostCenter: 'CCFIN03', newLocation: '', newProjectType: 'Enhancement', newContractWorkspaceNo: 'CW-2025-008', newSowName: 'Omega SOW Enhancements', newBidType: 'Fixed Bid', newRole: 'Senior Developer', newSkill: 'Java', newRateHr: '95.00', eppicChangeNeeded: { addToEPPIC: false, rateChange: true, costCenterChange: true, timeCardApproverChange: true, noChange: false }, eppicTimesheetApproverTransfer: 'Vikram Rathod', additionalCommentsTransfer: 'Transferring to finance project for senior Java role. Rate and cost center updated.'};
            fillSampleData(formId, sample); showCustomAlert('Sample Data Filled', 'Transfer Request form has been populated.', 'info');
        }
        function fillTermFormSampleData(formId) { /* ... same as previous ... */
            const today = new Date(); const effectiveDateValue = new Date(new Date().setDate(today.getDate() + 30)).toISOString().split('T')[0];
            const sample = { name: 'Neelima Nimmagadda', company: 'Wipro', firstName: 'Neelima', lastName: 'Nimmagadda', racfId: 'NN33445', keyEmployeeId: 'KEY004', projectTypeTerminate: 'Maintenance SOW', currentReportingManagerTerm: 'Ravi Teja', currentReportingManagersManagerTerm: 'Lakshmi Devi', effectiveDate: effectiveDateValue, reasonDescription: 'Contract End', eppicSeparationNeeded: 'yes', currentLocationSite: 'Tech Hub - Austin', workspaceStatus: 'release', currentWorkspaceNumber: 'AUS-02-A12', existingPhoneNumber: '(555) 444-5555', phoneReassigned: 'no', equipmentCollector: 'Admin Department', equipmentLocation: 'IT Storage Room B', mobileDeviceAccess: 'no', outOfOffice: 'yes', additionalCommentsTerminate: 'Contract ending as per schedule. OOO Message: "I am no longer with KeyBank. Please contact Ravi Teja for assistance."'};
            fillSampleData(formId, sample); showCustomAlert('Sample Data Filled', 'Terminate Request form has been populated.', 'info');
        }

        function showCustomAlert(title, message, type = 'info') {
            const existingAlert = document.getElementById('custom-alert-modal'); if (existingAlert) existingAlert.remove();
            let bgColorClass, textColorClass, iconSvg;
            switch (type) {
                case 'success': bgColorClass = 'bg-green-100'; textColorClass = 'text-green-700'; iconSvg = `<svg class="h-8 w-8 text-green-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`; break;
                case 'error': bgColorClass = 'bg-red-100'; textColorClass = 'text-red-700'; iconSvg = `<svg class="h-8 w-8 text-red-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`; break;
                default: bgColorClass = 'bg-sky-100'; textColorClass = 'text-sky-700'; iconSvg = `<svg class="h-8 w-8 text-sky-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;}
            const alertModal = document.createElement('div'); alertModal.id = 'custom-alert-modal';
            alertModal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center z-[100] p-4';
            alertModal.innerHTML = `<div class="relative mx-auto py-5 px-6 border w-full max-w-sm shadow-xl rounded-xl bg-white"><div class="flex flex-col items-center">
                <div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full ${bgColorClass} mb-4">${iconSvg}</div>
                <h3 class="text-xl leading-6 font-semibold ${textColorClass} mb-2">${title}</h3><div class="text-center"><p class="text-sm text-gray-600">${message}</p></div>
                <div class="mt-6 w-full"><button id="ok-btn" class="btn ${bgColorClass.replace('-100','-600').replace('bg-','btn-')} hover:${bgColorClass.replace('-100','-700')} text-white w-full py-2.5">OK</button>
                </div></div></div>`;
            document.body.appendChild(alertModal); const okButton = document.getElementById('ok-btn'); if (okButton) okButton.focus();
            const closeAlert = () => { if (alertModal.parentNode) {alertModal.parentNode.removeChild(alertModal);}};
            if (okButton) okButton.onclick = closeAlert; alertModal.onclick = (e) => { if(e.target === alertModal) closeAlert();};
        }

        document.addEventListener('DOMContentLoaded', () => {
            renderSidebar();
            renderHomeScreen();
            navigateTo('home-screen'); 
        });
    </script>
</body>
</html>